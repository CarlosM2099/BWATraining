@page "/"
@inject HttpClient httpClient

@code {
    List<PizzaSpecial> specials;
    Pizza configuringPizza;
    bool showingConfigureDialog;
    Order order = new Order();
    protected async override Task OnInitializedAsync()
    {
        specials = await httpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>()
        };

        showingConfigureDialog = true;
    }

    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        await httpClient.PostAsJsonAsync("orders", order);
        order = new Order();
    }
}

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li style="background-image: url('@special.ImageUrl')"
                    @onclick="@(() => ShowConfigurePizzaDialog(special))">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">
                            @special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if(order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu Orden</h2>
            @foreach(var configuredPizza in order.Pizzas)
            {
                <ConfigurePizzaItem Pizza="configuredPizza" OnRemoved="() => RemoveConfiguredPizza(configuredPizza)"></ConfigurePizzaItem>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza <br/>para empezar.</div>
    }
    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span vocab="total-price">@order.GetFormmattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="@PlaceOrder">Ordenar ></button>
    </div>

</div>

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmConfigurePizzaDialog"></ConfigurePizzaDialog>
}